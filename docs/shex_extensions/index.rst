.. _dctap_shex_extensions:

DCTAP extensions in support of ShEx
-----------------------------------

- `"Extra" properties <https://shex.io/shex-primer/#extra-properties>`_. In ShEx, once a property is "mentioned" in a triple constraint, that mention "closes the property". As explained in the ShEx Primer: "By default, for an RDF data node to match that shape, every outgoing arc from that node that uses a mentioned predicate must match a triple constrain in the shape". This interpretation coincides with what property mentions are commonly understood to mean in the context of Dublin Core-style application profiles. ShEx also allows a given predicate to be "opened", such that any number of additional arcs using that predicate can be accepted. For example, if shape has two triple constraints that mention the predicate ``rdf:type`` --- one constrained to class A as its value and one constrained to class B, then an outgoing type arc with a value of class C would by default fail validation. However, if that predicate is flagged in the shape as an "extra" property by use of the ShExC keyword ``EXTRA``, the outgoing type arc with a value of class C would pass validation. This behavior of ShEx can be supported by adding ``EXTRA`` as an extension element.

- `Closed shapes <https://shex.io/shex-primer/#closed-shapes>`_. In ShEx, shapes are matched against outgoing arcs from a given focus node in terms of the predicates mentioned in the triple constraints, and any other outgoing arcs --- triples that do not have the mentioned properties as their predicates --- are by default simply ignored. However, a given shape can be "closed" (by using the ShExC keyword ``CLOSED``), which means that `all` outgoing arcs from the given focus node must match the given set of triple constraints. In other words, a closed shape will pass validation only if all of its outgoing arcs match `and` there are no other outgoing arcs from that node in the data. This behavior of ShEx can be supported by adding ``CLOSED`` as an extension element for shapes.
- 
